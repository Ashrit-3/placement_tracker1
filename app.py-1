import os
from flask import Flask, render_template, request, redirect, url_for, session, flash
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
import requests

app = Flask(__name__)
app.secret_key = "8314c819a76a41fc1d28f1507776f121"  # Your secret key
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///placement.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)

# User model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), nullable=False, unique=True)
    password = db.Column(db.String(200), nullable=False)
    skills = db.Column(db.String(300))
    email = db.Column(db.String(150), nullable=False, unique=True)

# Create the database
with app.app_context():
    db.create_all()

# Home route
@app.route('/')
def home():
    return render_template('index.html')

# Register route
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = bcrypt.generate_password_hash(request.form['password']).decode('utf-8')
        skills = request.form['skills']

        if User.query.filter((User.username == username) | (User.email == email)).first():
            flash("Username or Email already exists!")
            return redirect(url_for('register'))

        new_user = User(username=username, password=password, email=email, skills=skills)
        db.session.add(new_user)
        db.session.commit()

        flash("âœ… Registration successful! Please log in.")
        return redirect(url_for('login'))

    return render_template('register.html')

# Login route
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email_or_username = request.form['email_or_username']
        password = request.form['password']

        user = User.query.filter((User.username == email_or_username) | (User.email == email_or_username)).first()

        if user and bcrypt.check_password_hash(user.password, password):
            session['user_id'] = user.id
            session['username'] = user.username
            flash(f"Welcome {user.username}!")
            return redirect(url_for('dashboard'))
        else:
            flash("Invalid credentials!")
            return redirect(url_for('login'))

    return render_template('login.html')

# Dashboard route
@app.route('/dashboard')
def dashboard():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    
    user = User.query.get(session['user_id'])

    # Fetch live jobs from Remotive API
    live_jobs = []
    try:
        response = requests.get('https://remotive.io/api/remote-jobs')
        data = response.json()
        live_jobs = data.get('jobs', [])[:10]  # Show first 10 jobs
    except:
        live_jobs = []

    return render_template('dashboard.html', user=user, live_jobs=live_jobs)

# Logout route
@app.route('/logout')
def logout():
    session.clear()
    flash("You have been logged out.")
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)